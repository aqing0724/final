#define ROW1 13
#define ROW2 12
#define ROW3 11
#define ROW4 10
#define ROW5 9
#define ROW6 8
#define ROW7 7
#define ROW8 6

#define COL1 5
#define COL2 4
#define COL3 3
#define COL4 A4
#define COL5 A3
#define COL6 A2
#define COL7 A1
#define COL8 A0

int rowPins[8] = {ROW1, ROW2, ROW3, ROW4, ROW5, ROW6, ROW7, ROW8};
int colPins[8] = {COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8};

int ballX = 4;
int ballY = 4;
int ballDirX = -1;
int ballDirY = 1;

int paddleLeftY = 3;
int paddleRightY = 3;

unsigned long lastMoveTime = 0;
const int moveInterval = 400; // üê¢ ÁêÉÈÄüËÆäÊÖ¢

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < 8; i++) {
    pinMode(rowPins[i], OUTPUT);
    pinMode(colPins[i], OUTPUT);
  }
  clearDisplay();
}

void loop() {
  handleInput();
  if (millis() - lastMoveTime > moveInterval) {
    moveBall();
    lastMoveTime = millis();
  }
  showGame();
}

void handleInput() {
  while (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == 'U' && paddleLeftY > 0) paddleLeftY--;
    else if (cmd == 'D' && paddleLeftY < 5) paddleLeftY++;
    else if (cmd == 'I' && paddleRightY > 0) paddleRightY--;
    else if (cmd == 'K' && paddleRightY < 5) paddleRightY++;
  }
}

void moveBall() {
  ballX += ballDirX;
  ballY += ballDirY;

  if (ballY <= 0 || ballY >= 7) {
    ballDirY *= -1;
    ballY += ballDirY;
  }

  if (ballX <= 0) {
    if (ballY >= paddleLeftY && ballY <= paddleLeftY + 2) {
      ballDirX *= -1;
      ballX = 0;
      Serial.write('G');
    } else {
      Serial.write('X');
      resetGame();
    }
  }

  if (ballX >= 7) {
    if (ballY >= paddleRightY && ballY <= paddleRightY + 2) {
      ballDirX *= -1;
      ballX = 7;
      Serial.write('G');
    } else {
      Serial.write('X');
      resetGame();
    }
  }
}

void showGame() {
  for (int row = 0; row < 8; row++) {
    clearRows();
    digitalWrite(rowPins[row], LOW);
    for (int col = 0; col < 8; col++) {
      bool showBall = (col == ballX && row == ballY);
      bool showLeftPaddle = (col == 0 && row >= paddleLeftY && row <= paddleLeftY + 2);
      bool showRightPaddle = (col == 7 && row >= paddleRightY && row <= paddleRightY + 2);
      digitalWrite(colPins[col], (showBall || showLeftPaddle || showRightPaddle) ? HIGH : LOW);
    }
    delayMicroseconds(1500);
  }
}

void clearDisplay() {
  for (int r = 0; r < 8; r++) digitalWrite(rowPins[r], HIGH);
  for (int c = 0; c < 8; c++) digitalWrite(colPins[c], HIGH);
}

void clearRows() {
  for (int r = 0; r < 8; r++) digitalWrite(rowPins[r], HIGH);
}

void resetGame() {
  ballX = 4;
  ballY = 4;
  ballDirX = random(0, 2) == 0 ? -1 : 1;
  ballDirY = random(0, 2) == 0 ? -1 : 1;
}
\
